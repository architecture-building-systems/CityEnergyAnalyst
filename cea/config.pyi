# Type stub file for cea.config
# Auto-generated from default.config - do not edit manually

from typing import Any, Dict, List, Union, Optional, Generator, Tuple, overload, Literal
import configparser

class Configuration:
    # Core configuration attributes
    default_config: configparser.ConfigParser
    user_config: configparser.ConfigParser
    sections: Dict[str, Section]
    restricted_to: Optional[List[str]]

    # Known sections from default.config with typed section classes
    general: GeneralSection
    database_helper: DatabaseHelperSection
    archetypes_mapper: ArchetypesMapperSection
    streets_helper: StreetsHelperSection
    terrain_helper: TerrainHelperSection
    surroundings_helper: SurroundingsHelperSection
    zone_helper: ZoneHelperSection
    trees_helper: TreesHelperSection
    weather_helper: WeatherHelperSection
    radiation_crax: RadiationCraxSection
    radiation: RadiationSection
    radiation_simplified: RadiationSimplifiedSection
    occupancy_helper: OccupancyHelperSection
    demand: DemandSection
    costs: CostsSection
    emissions: EmissionsSection
    extract_reference_case: ExtractReferenceCaseSection
    solar: SolarSection
    dbf_tools: DbfToolsSection
    to_rhino_gh: ToRhinoGhSection
    from_rhino_gh: FromRhinoGhSection
    shapefile_tools: ShapefileToolsSection
    sensitivity_analysis_tools: SensitivityAnalysisToolsSection
    format_helper: FormatHelperSection
    batch_process_workflow: BatchProcessWorkflowSection
    result_summary: ResultSummarySection
    result_analytics: ResultAnalyticsSection
    test: TestSection
    trace_inputlocator: TraceInputlocatorSection
    thermal_network: ThermalNetworkSection
    thermal_network_optimization: ThermalNetworkOptimizationSection
    optimization: OptimizationSection
    optimization_new: OptimizationNewSection
    plots: PlotsSection
    plots_optimization: PlotsOptimizationSection
    plots_supply_system: PlotsSupplySystemSection
    plots_comparisons: PlotsComparisonsSection
    sewage: SewageSection
    water_body: WaterBodySection
    shallow_geothermal: ShallowGeothermalSection
    create_new_scenario: CreateNewScenarioSection
    decentralized: DecentralizedSection
    network_layout: NetworkLayoutSection
    multi_criteria: MultiCriteriaSection
    workflow: WorkflowSection
    rename_building: RenameBuildingSection
    create_mixed_use_type: CreateMixedUseTypeSection
    create_polygon: CreatePolygonSection
    server: ServerSection
    schemas: SchemasSection
    development: DevelopmentSection
    plots_general: PlotsGeneralSection
    plots_building_filter: PlotsBuildingFilterSection
    plots_demand: PlotsDemandSection
    plots_solar: PlotsSolarSection
    plots_comfort_chart: PlotsComfortChartSection

    # Common general section parameters (frequently accessed)
    project: str
    scenario_name: str
    scenario: str
    multiprocessing: bool
    number_of_cpus_to_keep_free: int
    debug: bool
    plugins: List[Any]

    # Nested classes
    class RestrictionContextManager:
        config: Any
        parameters: Optional[List[str]]
        def __enter__(self) -> Any: ...
        def __exit__(self, exc_type, exc_val, exc_tb) -> Any: ...
        def __init__(self, config, parameters: Optional[List[str]]) -> Any: ...
        def apply(self) -> Any: ...
        def clear(self) -> Any: ...

    def __getattr__(self, item: str) -> Union['Section', Any]: ...
    def __init__(self, config_file: str = ...) -> Any: ...
    def __setattr__(self, key: str, value: Any) -> Any: ...
    def apply_command_line_args(self, args: List[str], option_list: List[str]) -> None: ...
    def get(self, fqname: str) -> Parameter: ...
    def get_number_of_processes(self) -> int: ...
    def get_parameter(self, fqname: str) -> Parameter: ...
    def ignore_restrictions(self) -> RestrictionContextManager: ...
    def matching_parameters(self, option_list: List[str]) -> Generator[Tuple[Section, Parameter]]: ...
    def refresh_plugins(self) -> None: ...
    def restrict_to(self, option_list: List[str]) -> None: ...
    def save(self, config_file: str = ...) -> None: ...
    def temp_restrictions(self, parameters: List[str]) -> RestrictionContextManager: ...

    # Overloads for specific section access
    @overload
    def __getattr__(self, item: Literal["general"]) -> GeneralSection: ...
    @overload
    def __getattr__(self, item: Literal["database_helper"]) -> DatabaseHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["archetypes_mapper"]) -> ArchetypesMapperSection: ...
    @overload
    def __getattr__(self, item: Literal["streets_helper"]) -> StreetsHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["terrain_helper"]) -> TerrainHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["surroundings_helper"]) -> SurroundingsHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["zone_helper"]) -> ZoneHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["trees_helper"]) -> TreesHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["weather_helper"]) -> WeatherHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["radiation_crax"]) -> RadiationCraxSection: ...
    @overload
    def __getattr__(self, item: Literal["radiation"]) -> RadiationSection: ...
    @overload
    def __getattr__(self, item: Literal["radiation_simplified"]) -> RadiationSimplifiedSection: ...
    @overload
    def __getattr__(self, item: Literal["occupancy_helper"]) -> OccupancyHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["demand"]) -> DemandSection: ...
    @overload
    def __getattr__(self, item: Literal["costs"]) -> CostsSection: ...
    @overload
    def __getattr__(self, item: Literal["emissions"]) -> EmissionsSection: ...
    @overload
    def __getattr__(self, item: Literal["extract_reference_case"]) -> ExtractReferenceCaseSection: ...
    @overload
    def __getattr__(self, item: Literal["solar"]) -> SolarSection: ...
    @overload
    def __getattr__(self, item: Literal["dbf_tools"]) -> DbfToolsSection: ...
    @overload
    def __getattr__(self, item: Literal["to_rhino_gh"]) -> ToRhinoGhSection: ...
    @overload
    def __getattr__(self, item: Literal["from_rhino_gh"]) -> FromRhinoGhSection: ...
    @overload
    def __getattr__(self, item: Literal["shapefile_tools"]) -> ShapefileToolsSection: ...
    @overload
    def __getattr__(self, item: Literal["sensitivity_analysis_tools"]) -> SensitivityAnalysisToolsSection: ...
    @overload
    def __getattr__(self, item: Literal["format_helper"]) -> FormatHelperSection: ...
    @overload
    def __getattr__(self, item: Literal["batch_process_workflow"]) -> BatchProcessWorkflowSection: ...
    @overload
    def __getattr__(self, item: Literal["result_summary"]) -> ResultSummarySection: ...
    @overload
    def __getattr__(self, item: Literal["result_analytics"]) -> ResultAnalyticsSection: ...
    @overload
    def __getattr__(self, item: Literal["test"]) -> TestSection: ...
    @overload
    def __getattr__(self, item: Literal["trace_inputlocator"]) -> TraceInputlocatorSection: ...
    @overload
    def __getattr__(self, item: Literal["thermal_network"]) -> ThermalNetworkSection: ...
    @overload
    def __getattr__(self, item: Literal["thermal_network_optimization"]) -> ThermalNetworkOptimizationSection: ...
    @overload
    def __getattr__(self, item: Literal["optimization"]) -> OptimizationSection: ...
    @overload
    def __getattr__(self, item: Literal["optimization_new"]) -> OptimizationNewSection: ...
    @overload
    def __getattr__(self, item: Literal["plots"]) -> PlotsSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_optimization"]) -> PlotsOptimizationSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_supply_system"]) -> PlotsSupplySystemSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_comparisons"]) -> PlotsComparisonsSection: ...
    @overload
    def __getattr__(self, item: Literal["sewage"]) -> SewageSection: ...
    @overload
    def __getattr__(self, item: Literal["water_body"]) -> WaterBodySection: ...
    @overload
    def __getattr__(self, item: Literal["shallow_geothermal"]) -> ShallowGeothermalSection: ...
    @overload
    def __getattr__(self, item: Literal["create_new_scenario"]) -> CreateNewScenarioSection: ...
    @overload
    def __getattr__(self, item: Literal["decentralized"]) -> DecentralizedSection: ...
    @overload
    def __getattr__(self, item: Literal["network_layout"]) -> NetworkLayoutSection: ...
    @overload
    def __getattr__(self, item: Literal["multi_criteria"]) -> MultiCriteriaSection: ...
    @overload
    def __getattr__(self, item: Literal["workflow"]) -> WorkflowSection: ...
    @overload
    def __getattr__(self, item: Literal["rename_building"]) -> RenameBuildingSection: ...
    @overload
    def __getattr__(self, item: Literal["create_mixed_use_type"]) -> CreateMixedUseTypeSection: ...
    @overload
    def __getattr__(self, item: Literal["create_polygon"]) -> CreatePolygonSection: ...
    @overload
    def __getattr__(self, item: Literal["server"]) -> ServerSection: ...
    @overload
    def __getattr__(self, item: Literal["schemas"]) -> SchemasSection: ...
    @overload
    def __getattr__(self, item: Literal["development"]) -> DevelopmentSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_general"]) -> PlotsGeneralSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_building_filter"]) -> PlotsBuildingFilterSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_demand"]) -> PlotsDemandSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_solar"]) -> PlotsSolarSection: ...
    @overload
    def __getattr__(self, item: Literal["plots_comfort_chart"]) -> PlotsComfortChartSection: ...

    # Overloads for general section parameter access
    @overload
    def __getattr__(self, item: Literal["project"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["scenario_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["scenario"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["multiprocessing"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["number_of_cpus_to_keep_free"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["debug"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["plugins"]) -> List[Any]: ...

class Section:
    name: str
    config: Configuration
    parameters: Dict[str, Parameter]

    def __getattr__(self, item: str) -> Any: ...
    def __init__(self, name: str, config: 'Configuration') -> None: ...
    def __repr__(self) -> str: ...
    def __setattr__(self, key: str, value: Any) -> Any: ...

# Typed section classes with parameter annotations
class GeneralSection(Section):
    """Typed section for general configuration"""
    project: str
    scenario_name: str
    scenario: str
    multiprocessing: bool
    number_of_cpus_to_keep_free: int
    debug: bool
    plugins: List[Any]

    @overload
    def __getattr__(self, item: Literal["project"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["scenario_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["scenario"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["multiprocessing"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["number_of_cpus_to_keep_free"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["debug"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["plugins"]) -> List[Any]: ...
    def __getattr__(self, item: str) -> Any: ...

class DatabaseHelperSection(Section):
    """Typed section for database-helper configuration"""
    databases_path: str
    databases: List[str]

    @overload
    def __getattr__(self, item: Literal["databases_path"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["databases"]) -> List[str]: ...
    def __getattr__(self, item: str) -> Any: ...

class ArchetypesMapperSection(Section):
    """Typed section for archetypes-mapper configuration"""
    input_databases: List[str]
    buildings: str

    @overload
    def __getattr__(self, item: Literal["input_databases"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class StreetsHelperSection(Section):
    """Typed section for streets-helper configuration"""
    include_private_streets: bool

    @overload
    def __getattr__(self, item: Literal["include_private_streets"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class TerrainHelperSection(Section):
    """Typed section for terrain-helper configuration"""
    grid_size: int
    buffer: float

    @overload
    def __getattr__(self, item: Literal["grid_size"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["buffer"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class SurroundingsHelperSection(Section):
    """Typed section for surroundings-helper configuration"""
    buffer: float

    @overload
    def __getattr__(self, item: Literal["buffer"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class ZoneHelperSection(Section):
    """Typed section for zone-helper configuration"""
    height_ag: float
    floors_ag: int
    year_construction: int
    height_bg: float
    floors_bg: int
    occupancy_type: str
    include_building_parts: bool
    fix_overlapping_geometries: bool

    @overload
    def __getattr__(self, item: Literal["height_ag"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["floors_ag"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["year_construction"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["height_bg"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["floors_bg"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["occupancy_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["include_building_parts"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["fix_overlapping_geometries"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class TreesHelperSection(Section):
    """Typed section for trees-helper configuration"""
    trees: str

    @overload
    def __getattr__(self, item: Literal["trees"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class WeatherHelperSection(Section):
    """Typed section for weather-helper configuration"""
    weather: str

    @overload
    def __getattr__(self, item: Literal["weather"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class RadiationCraxSection(Section):
    """Typed section for radiation-crax configuration"""
    buildings: str
    albedo: float
    calculate_sensor_data: bool
    using_cea_sensor: bool
    roof_grid: float
    walls_grid: float
    mesh_clipping_view_factor: bool
    zone_geometry: float
    surrounding_geometry: float
    neglect_adjacent_buildings: bool
    neighbor_filter_altitude_angle: float
    crax_bin_directory: str
    update_shadow_day: float

    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["albedo"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["calculate_sensor_data"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["using_cea_sensor"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["roof_grid"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["walls_grid"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["mesh_clipping_view_factor"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["zone_geometry"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["surrounding_geometry"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["neglect_adjacent_buildings"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["neighbor_filter_altitude_angle"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["crax_bin_directory"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["update_shadow_day"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class RadiationSection(Section):
    """Typed section for radiation configuration"""
    buildings: str
    roof_grid: float
    walls_grid: float
    zone_geometry: float
    surrounding_geometry: float
    consider_floors: bool
    neglect_adjacent_buildings: bool
    albedo: float
    rad_ab: int
    rad_ad: int
    rad_as: int
    rad_ar: int
    rad_aa: float
    rad_lr: int
    rad_st: float
    rad_sj: float
    rad_lw: float
    rad_dj: float
    rad_ds: float
    rad_dr: int
    rad_dp: int
    daysim_bin_directory: str
    n_buildings_in_chunk: int
    write_sensor_data: bool

    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["roof_grid"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["walls_grid"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["zone_geometry"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["surrounding_geometry"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["consider_floors"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["neglect_adjacent_buildings"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["albedo"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_ab"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["rad_ad"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["rad_as"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["rad_ar"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["rad_aa"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_lr"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["rad_st"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_sj"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_lw"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_dj"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_ds"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["rad_dr"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["rad_dp"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["daysim_bin_directory"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["n_buildings_in_chunk"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["write_sensor_data"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class RadiationSimplifiedSection(Section):
    """Typed section for radiation-simplified configuration"""
    sample_buildings: str
    buffer: float

    @overload
    def __getattr__(self, item: Literal["sample_buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["buffer"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class OccupancyHelperSection(Section):
    """Typed section for occupancy-helper configuration"""
    occupancy_model: str
    buildings: str

    @overload
    def __getattr__(self, item: Literal["occupancy_model"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class DemandSection(Section):
    """Typed section for demand configuration"""
    buildings: str
    resolution_output: str
    use_dynamic_infiltration_calculation: bool
    overheating_warning: bool

    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["resolution_output"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["use_dynamic_infiltration_calculation"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["overheating_warning"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class CostsSection(Section):
    """Typed section for costs configuration"""
    capital: bool
    operational: bool

    @overload
    def __getattr__(self, item: Literal["capital"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["operational"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class EmissionsSection(Section):
    """Typed section for emissions configuration"""
    year_to_calculate: int
    embodied: bool
    operational: bool

    @overload
    def __getattr__(self, item: Literal["year_to_calculate"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["embodied"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["operational"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class ExtractReferenceCaseSection(Section):
    """Typed section for extract-reference-case configuration"""
    destination: str
    case: str

    @overload
    def __getattr__(self, item: Literal["destination"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["case"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class SolarSection(Section):
    """Typed section for solar configuration"""
    type_pvpanel: str
    type_scpanel: List[str]
    panel_on_roof: bool
    panel_on_wall: bool
    annual_radiation_threshold: float
    t_in_sc: float
    t_in_pvt: float
    solar_window_solstice: int
    max_roof_coverage: float
    custom_tilt_angle: bool
    panel_tilt_angle: float
    buildings: str

    @overload
    def __getattr__(self, item: Literal["type_pvpanel"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["type_scpanel"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["panel_on_roof"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["panel_on_wall"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["annual_radiation_threshold"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["t_in_sc"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["t_in_pvt"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["solar_window_solstice"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["max_roof_coverage"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["custom_tilt_angle"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["panel_tilt_angle"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class DbfToolsSection(Section):
    """Typed section for dbf-tools configuration"""
    input_file: str
    output_file_name: str
    output_path: str

    @overload
    def __getattr__(self, item: Literal["input_file"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["output_file_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["output_path"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class ToRhinoGhSection(Section):
    """Typed section for to-rhino-gh configuration"""
    include_zone: bool
    include_site: bool
    include_surroundings: bool
    include_streets: bool
    include_trees: bool
    include_district_heating_network: bool
    include_district_cooling_network: bool

    @overload
    def __getattr__(self, item: Literal["include_zone"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_site"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_surroundings"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_streets"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_trees"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_district_heating_network"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_district_cooling_network"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class FromRhinoGhSection(Section):
    """Typed section for from-rhino-gh configuration"""
    reference_scenario_name: str
    copy_database: bool
    copy_terrain: bool
    copy_weather: bool

    @overload
    def __getattr__(self, item: Literal["reference_scenario_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["copy_database"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["copy_terrain"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["copy_weather"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class ShapefileToolsSection(Section):
    """Typed section for shapefile-tools configuration"""
    input_file: str
    output_file_name: str
    output_path: str
    reference_crs_file: str
    polygon: bool

    @overload
    def __getattr__(self, item: Literal["input_file"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["output_file_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["output_path"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["reference_crs_file"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["polygon"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class SensitivityAnalysisToolsSection(Section):
    """Typed section for sensitivity-analysis-tools configuration"""
    create_scenario_directory: bool
    n: int
    having_variable_1: bool
    variable_1_lower_bound: float
    variable_1_upper_bound: float
    having_variable_2: bool
    variable_2_lower_bound: float
    variable_2_upper_bound: float
    having_variable_3: bool
    variable_3_lower_bound: float
    variable_3_upper_bound: float
    having_variable_4: bool
    variable_4_lower_bound: float
    variable_4_upper_bound: float
    having_variable_5: bool
    variable_5_lower_bound: float
    variable_5_upper_bound: float

    @overload
    def __getattr__(self, item: Literal["create_scenario_directory"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["n"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["having_variable_1"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["variable_1_lower_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["variable_1_upper_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["having_variable_2"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["variable_2_lower_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["variable_2_upper_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["having_variable_3"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["variable_3_lower_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["variable_3_upper_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["having_variable_4"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["variable_4_lower_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["variable_4_upper_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["having_variable_5"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["variable_5_lower_bound"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["variable_5_upper_bound"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class FormatHelperSection(Section):
    """Typed section for format-helper configuration"""
    scenarios_to_verify_and_migrate: str
    migrate_from_cea_3: bool

    @overload
    def __getattr__(self, item: Literal["scenarios_to_verify_and_migrate"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["migrate_from_cea_3"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class BatchProcessWorkflowSection(Section):
    """Typed section for batch-process-workflow configuration"""
    scenarios_to_simulate: str
    export_to_rhino_gh: bool
    import_from_rhino_gh: bool
    database_helper: bool
    archetypes_mapper: bool
    weather_helper: bool
    surroundings_helper: bool
    terrain_helper: bool
    streets_helper: bool
    radiation: bool
    solar_potential_pv: bool
    solar_potential_pvt: bool
    solar_potential_sc: bool
    shallow_geothermal_potential: bool
    water_body_potential: bool
    demand_forecasting: bool
    sewage_heat_potential: bool
    thermal_network_layout: bool
    thermal_network_operation: bool
    emissions: bool
    system_costs: bool
    optimisation: bool
    results_summary_and_analytics: bool

    @overload
    def __getattr__(self, item: Literal["scenarios_to_simulate"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["export_to_rhino_gh"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["import_from_rhino_gh"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["database_helper"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["archetypes_mapper"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["weather_helper"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["surroundings_helper"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["terrain_helper"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["streets_helper"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["radiation"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["solar_potential_pv"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["solar_potential_pvt"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["solar_potential_sc"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["shallow_geothermal_potential"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["water_body_potential"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["demand_forecasting"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["sewage_heat_potential"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["thermal_network_layout"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["thermal_network_operation"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["emissions"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["system_costs"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["optimisation"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["results_summary_and_analytics"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class ResultSummarySection(Section):
    """Typed section for result-summary configuration"""
    folder_name_to_save_exported_results: str
    buildings: str
    filter_buildings_by_year_start: int
    filter_buildings_by_year_end: int
    filter_buildings_by_construction_type: str
    filter_buildings_by_use_type: str
    min_ratio_as_main_use: float
    aggregate_by_building: bool
    aggregate_by_time_period: List[str]
    period_start_date: List[str]
    period_end_date: List[str]
    metrics_building_energy_demand: bool
    metrics_emissions: bool
    metrics_solar_irradiation: bool
    metrics_photovoltaic_panels: bool
    metrics_photovoltaic_thermal_panels: bool
    metrics_solar_collectors: bool
    metrics_other_renewables: bool
    metrics_district_heating: bool
    metrics_district_cooling: bool
    include_advanced_analytics: bool
    use_cea_acronym_format_column_names: bool
    use_conditioned_floor_area_for_normalisation: bool

    @overload
    def __getattr__(self, item: Literal["folder_name_to_save_exported_results"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_year_start"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_year_end"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_construction_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_use_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["min_ratio_as_main_use"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["aggregate_by_building"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["aggregate_by_time_period"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["period_start_date"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["period_end_date"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["metrics_building_energy_demand"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_emissions"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_solar_irradiation"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_photovoltaic_panels"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_photovoltaic_thermal_panels"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_solar_collectors"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_other_renewables"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_district_heating"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["metrics_district_cooling"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["include_advanced_analytics"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["use_cea_acronym_format_column_names"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["use_conditioned_floor_area_for_normalisation"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class ResultAnalyticsSection(Section):
    """Typed section for result-analytics configuration"""
    all_scenarios: bool

    @overload
    def __getattr__(self, item: Literal["all_scenarios"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class TestSection(Section):
    """Typed section for test configuration"""
    type: str

    @overload
    def __getattr__(self, item: Literal["type"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class TraceInputlocatorSection(Section):
    """Typed section for trace-inputlocator configuration"""
    scripts: List[str]
    meta_output_file: str

    @overload
    def __getattr__(self, item: Literal["scripts"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["meta_output_file"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class ThermalNetworkSection(Section):
    """Typed section for thermal-network configuration"""
    network_type: str
    network_model: str
    min_head_substation: float
    hw_friction_coefficient: int
    peak_load_velocity: float
    equivalent_length_factor: float
    peak_load_percentage: float
    set_diameter: bool
    load_max_edge_flowrate_from_previous_run: bool
    start_t: int
    stop_t: int
    use_representative_week_per_month: bool
    minimum_mass_flow_iteration_limit: int
    minimum_edge_mass_flow: float
    diameter_iteration_limit: int
    substation_cooling_systems: List[str]
    substation_heating_systems: List[str]
    temperature_control: str
    plant_supply_temperature: float

    @overload
    def __getattr__(self, item: Literal["network_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["network_model"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["min_head_substation"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["hw_friction_coefficient"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["peak_load_velocity"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["equivalent_length_factor"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["peak_load_percentage"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["set_diameter"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["load_max_edge_flowrate_from_previous_run"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["start_t"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["stop_t"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["use_representative_week_per_month"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["minimum_mass_flow_iteration_limit"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["minimum_edge_mass_flow"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["diameter_iteration_limit"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["substation_cooling_systems"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["substation_heating_systems"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["temperature_control"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["plant_supply_temperature"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class ThermalNetworkOptimizationSection(Section):
    """Typed section for thermal-network-optimization configuration"""
    network_type: str
    network_names: List[str]
    file_type: str
    set_diameter: bool
    load_max_edge_flowrate_from_previous_run: bool
    start_t: int
    stop_t: int
    network_name: str
    possible_plant_sites: List[str]
    min_number_of_plants: int
    max_number_of_plants: int
    number_of_individuals: int
    chance_of_mutation: float
    number_of_generations: int
    lucky_few: int
    optimize_loop_branch: bool
    optimize_network_loads: bool
    optimize_building_connections: bool
    use_rule_based_approximation: bool
    use_representative_week_per_month: bool
    minimum_mass_flow_iteration_limit: int
    minimum_edge_mass_flow: float
    diameter_iteration_limit: int
    substation_cooling_systems: List[str]
    substation_heating_systems: List[str]
    disconnected_buildings: List[str]
    yearly_cost_calculations: bool

    @overload
    def __getattr__(self, item: Literal["network_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["network_names"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["file_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["set_diameter"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["load_max_edge_flowrate_from_previous_run"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["start_t"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["stop_t"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["network_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["possible_plant_sites"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["min_number_of_plants"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["max_number_of_plants"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["number_of_individuals"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["chance_of_mutation"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["number_of_generations"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["lucky_few"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["optimize_loop_branch"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["optimize_network_loads"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["optimize_building_connections"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["use_rule_based_approximation"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["use_representative_week_per_month"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["minimum_mass_flow_iteration_limit"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["minimum_edge_mass_flow"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["diameter_iteration_limit"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["substation_cooling_systems"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["substation_heating_systems"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["disconnected_buildings"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["yearly_cost_calculations"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class OptimizationSection(Section):
    """Typed section for optimization configuration"""
    network_type: str
    technologies_dh: List[str]
    technologies_dc: List[str]
    objective_functions_dc: List[str]
    cold_storage_type: str
    population_size: int
    number_of_generations: int
    random_seed: int
    mutation_prob: float
    mutation_method_integer: str
    mutation_method_continuous: str
    crossover_prob: float
    crossover_method_integer: str
    crossover_method_continuous: str

    @overload
    def __getattr__(self, item: Literal["network_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["technologies_dh"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["technologies_dc"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["objective_functions_dc"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["cold_storage_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["population_size"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["number_of_generations"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["random_seed"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["mutation_prob"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["mutation_method_integer"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["mutation_method_continuous"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["crossover_prob"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["crossover_method_integer"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["crossover_method_continuous"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class OptimizationNewSection(Section):
    """Typed section for optimization-new configuration"""
    network_type: str
    cooling_components: List[str]
    heating_components: List[str]
    heat_rejection_components: List[str]
    maximum_number_of_networks: int
    objective_functions: List[str]
    generate_detailed_outputs: bool
    retain_run_results: bool
    available_energy_sources: List[str]
    available_energy_potentials: List[str]
    component_efficiency_model_complexity: str
    network_temperature: int
    systems_algorithm: str
    systems_mutation_method: str
    systems_crossover_method: str
    networks_algorithm: str
    networks_mutation_method: str
    networks_crossover_method: str
    building_clustering_method: str
    networks_overlap_correction_method: str
    ga_population_size: int
    ga_number_of_generations: int
    ga_mutation_prob: float
    ga_crossover_prob: float
    ga_mutation_eta: float
    min_head_substation: float
    hw_friction_coefficient: int
    peak_load_velocity: float
    equivalent_length_factor: float
    peak_load_percentage: float
    network_lifetime: float

    @overload
    def __getattr__(self, item: Literal["network_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["cooling_components"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["heating_components"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["heat_rejection_components"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["maximum_number_of_networks"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["objective_functions"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["generate_detailed_outputs"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["retain_run_results"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["available_energy_sources"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["available_energy_potentials"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["component_efficiency_model_complexity"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["network_temperature"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["systems_algorithm"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["systems_mutation_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["systems_crossover_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["networks_algorithm"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["networks_mutation_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["networks_crossover_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["building_clustering_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["networks_overlap_correction_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["ga_population_size"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["ga_number_of_generations"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["ga_mutation_prob"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["ga_crossover_prob"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["ga_mutation_eta"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["min_head_substation"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["hw_friction_coefficient"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["peak_load_velocity"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["equivalent_length_factor"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["peak_load_percentage"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["network_lifetime"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsSection(Section):
    """Typed section for plots configuration"""
    buildings: str
    building: str
    categories: List[str]
    network_type: str
    network_name: str
    plant_node: str
    timeframe: str
    normalization: str

    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["building"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["categories"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["network_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["network_name"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["plant_node"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["timeframe"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["normalization"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsOptimizationSection(Section):
    """Typed section for plots-optimization configuration"""
    generation: str
    normalization: str

    @overload
    def __getattr__(self, item: Literal["generation"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["normalization"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsSupplySystemSection(Section):
    """Typed section for plots-supply-system configuration"""
    system: str
    timeframe: str

    @overload
    def __getattr__(self, item: Literal["system"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["timeframe"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsComparisonsSection(Section):
    """Typed section for plots-comparisons configuration"""
    scenarios_and_systems: List[str]
    normalization: str

    @overload
    def __getattr__(self, item: Literal["scenarios_and_systems"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["normalization"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class SewageSection(Section):
    """Typed section for sewage configuration"""
    heat_exchanger_length: int
    sewage_water_ratio: float
    sewage_water_district: float

    @overload
    def __getattr__(self, item: Literal["heat_exchanger_length"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["sewage_water_ratio"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["sewage_water_district"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class WaterBodySection(Section):
    """Typed section for water-body configuration"""
    max_water_volume_withdrawal: float
    max_delta_temperature_withdrawal: float
    temperature_max: float
    temperature_min: float

    @overload
    def __getattr__(self, item: Literal["max_water_volume_withdrawal"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["max_delta_temperature_withdrawal"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["temperature_max"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["temperature_min"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class ShallowGeothermalSection(Section):
    """Typed section for shallow-geothermal configuration"""
    buildings_available: str
    extra_area_available: float
    average_probe_depth: float

    @overload
    def __getattr__(self, item: Literal["buildings_available"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["extra_area_available"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["average_probe_depth"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class CreateNewScenarioSection(Section):
    """Typed section for create-new-scenario configuration"""
    project: str
    scenario: str
    output_path: str
    zone: str
    terrain: str
    streets: str
    surroundings: str
    typology: str

    @overload
    def __getattr__(self, item: Literal["project"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["scenario"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["output_path"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["zone"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["terrain"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["streets"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["surroundings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["typology"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class DecentralizedSection(Section):
    """Typed section for decentralized configuration"""
    pass
    def __getattr__(self, item: str) -> Any: ...

class NetworkLayoutSection(Section):
    """Typed section for network-layout configuration"""
    network_type: str
    connected_buildings: str
    plant_buildings: List[str]
    pipe_diameter: int
    consider_only_buildings_with_demand: bool
    algorithm: str

    @overload
    def __getattr__(self, item: Literal["network_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["connected_buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["plant_buildings"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["pipe_diameter"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["consider_only_buildings_with_demand"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["algorithm"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class MultiCriteriaSection(Section):
    """Typed section for multi-criteria configuration"""
    generation: int
    annualized_capital_costs: float
    total_capital_costs: float
    annual_operation_costs: float
    annual_emissions: float

    @overload
    def __getattr__(self, item: Literal["generation"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["annualized_capital_costs"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["total_capital_costs"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["annual_operation_costs"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["annual_emissions"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class WorkflowSection(Section):
    """Typed section for workflow configuration"""
    workflow: str
    resume: bool
    resume_file: str
    trace_input: bool

    @overload
    def __getattr__(self, item: Literal["workflow"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["resume"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["resume_file"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["trace_input"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class RenameBuildingSection(Section):
    """Typed section for rename-building configuration"""
    old: str
    new: str

    @overload
    def __getattr__(self, item: Literal["old"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["new"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class CreateMixedUseTypeSection(Section):
    """Typed section for create-mixed-use-type configuration"""
    use_type: str
    metadata: str
    ratios: str

    @overload
    def __getattr__(self, item: Literal["use_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["metadata"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["ratios"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class CreatePolygonSection(Section):
    """Typed section for create-polygon configuration"""
    coordinates: List[Tuple[float, float]]
    filename: str

    @overload
    def __getattr__(self, item: Literal["coordinates"]) -> List[Tuple[float, float]]: ...
    @overload
    def __getattr__(self, item: Literal["filename"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class ServerSection(Section):
    """Typed section for server configuration"""
    project_root: str
    protocol: str
    host: str
    port: int
    dev: bool

    @overload
    def __getattr__(self, item: Literal["project_root"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["protocol"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["host"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["port"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["dev"]) -> bool: ...
    def __getattr__(self, item: str) -> Any: ...

class SchemasSection(Section):
    """Typed section for schemas configuration"""
    locator_method: str
    args: Optional[Any]

    @overload
    def __getattr__(self, item: Literal["locator_method"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["args"]) -> Optional[Any]: ...
    def __getattr__(self, item: str) -> Any: ...

class DevelopmentSection(Section):
    """Typed section for development configuration"""
    nsis: str
    conda: str
    gui: str
    yarn: str
    release_version: str

    @overload
    def __getattr__(self, item: Literal["nsis"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["conda"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["gui"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["yarn"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["release_version"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsGeneralSection(Section):
    """Typed section for plots-general configuration"""
    plot_title: str
    plot_type: str
    buildings: str
    y_min: float
    y_max: float
    y_step: float
    y_label: str
    x_to_plot: str
    facet_by_numbers_wrapped: int
    facet_by_rows: bool
    x_sorted_by: str
    x_sorted_reversed: bool
    x_label: str
    context: Any

    @overload
    def __getattr__(self, item: Literal["plot_title"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["plot_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["y_min"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["y_max"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["y_step"]) -> float: ...
    @overload
    def __getattr__(self, item: Literal["y_label"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["x_to_plot"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["facet_by_numbers_wrapped"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["facet_by_rows"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["x_sorted_by"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["x_sorted_reversed"]) -> bool: ...
    @overload
    def __getattr__(self, item: Literal["x_label"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["context"]) -> Any: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsBuildingFilterSection(Section):
    """Typed section for plots-building-filter configuration"""
    filter_buildings_by_year_start: int
    filter_buildings_by_year_end: int
    filter_buildings_by_construction_type: str
    filter_buildings_by_use_type: str
    min_ratio_as_main_use: float

    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_year_start"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_year_end"]) -> int: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_construction_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["filter_buildings_by_use_type"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["min_ratio_as_main_use"]) -> float: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsDemandSection(Section):
    """Typed section for plots-demand configuration"""
    y_metric_to_plot: List[str]
    y_metric_unit: str
    y_normalised_by: str

    @overload
    def __getattr__(self, item: Literal["y_metric_to_plot"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["y_metric_unit"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["y_normalised_by"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsSolarSection(Section):
    """Typed section for plots-solar configuration"""
    y_metric_to_plot: List[str]
    y_metric_unit: str
    y_normalised_by: str

    @overload
    def __getattr__(self, item: Literal["y_metric_to_plot"]) -> List[str]: ...
    @overload
    def __getattr__(self, item: Literal["y_metric_unit"]) -> str: ...
    @overload
    def __getattr__(self, item: Literal["y_normalised_by"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class PlotsComfortChartSection(Section):
    """Typed section for plots-comfort-chart configuration"""
    buildings: str

    @overload
    def __getattr__(self, item: Literal["buildings"]) -> str: ...
    def __getattr__(self, item: str) -> Any: ...

class Parameter:
    name: str
    section: Section
    fqname: str
    config: Configuration
    help: str
    category: Optional[str]

    def __init__(self, name, section, config) -> Any: ...
    def __repr__(self) -> str: ...
    def decode(self, value) -> Any: ...
    def encode(self, value) -> Any: ...
    def get(self) -> Any: ...
    def get_raw(self) -> Any: ...
    def initialize(self, parser) -> Any: ...
    def replace_references(self, encoded_value) -> Any: ...
    def set(self, value) -> Any: ...

# Parameter type classes for better type hints
class BooleanParameter(Parameter): ...
class BuildingsParameter(Parameter): ...
class ChoiceParameter(Parameter): ...
class ColumnChoiceParameter(Parameter): ...
class ColumnMultiChoiceParameter(Parameter): ...
class CoordinateListParameter(Parameter): ...
class DatabasePathParameter(Parameter): ...
class DateParameter(Parameter): ...
class FileParameter(Parameter): ...
class GenerationParameter(Parameter): ...
class IntegerParameter(Parameter): ...
class JsonParameter(Parameter): ...
class ListParameter(Parameter): ...
class MultiChoiceParameter(Parameter): ...
class MultiSystemParameter(Parameter): ...
class NullablePathParameter(Parameter): ...
class OptimizationIndividualListParameter(Parameter): ...
class OrderedMultiChoiceParameter(Parameter): ...
class PathParameter(Parameter): ...
class PlantNodeParameter(Parameter): ...
class PlotContextParameter(Parameter): ...
class PluginListParameter(Parameter): ...
class RealParameter(Parameter): ...
class ResumeFileParameter(Parameter): ...
class ScenarioNameMultiChoiceParameter(Parameter): ...
class ScenarioNameParameter(Parameter): ...
class ScenarioParameter(Parameter): ...
class SingleBuildingParameter(Parameter): ...
class SingleThermalStorageParameter(Parameter): ...
class StringParameter(Parameter): ...
class SubfoldersParameter(Parameter): ...
class SystemParameter(Parameter): ...
class UseTypeRatioParameter(Parameter): ...
class WeatherPathParameter(Parameter): ...
class WorkflowParameter(Parameter): ...

def config_identifier(python_identifier: str) -> str: ...
